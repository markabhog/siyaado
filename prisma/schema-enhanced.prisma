// Enhanced Prisma Schema for E-commerce Platform
// This is your Prisma schema file with all enhancements
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  CUSTOMER
  ADMIN
  RESELLER
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
  REFUNDED
}

enum PaymentMethod {
  MOBILE_MONEY
  COD
  CREDIT_CARD
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ShippingMethod {
  STANDARD      // 5-7 days
  EXPRESS       // 2-3 days
  OVERNIGHT     // Next day
  PICKUP        // Store pickup
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  BUY_X_GET_Y
}

// Models
model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  phone         String?
  password      String?        // For credentials authentication
  emailVerified DateTime?      // For email verification
  image         String?        // Profile image
  role          Role           @default(CUSTOMER)
  
  // Customer type
  isWholesale   Boolean        @default(false) // For wholesale pricing
  
  // Loyalty & rewards
  loyaltyPoints Int            @default(0)
  
  // Relations
  orders        Order[]
  wishlist      WishlistItem[]
  reviews       Review[]
  addresses     Address[]
  carts         Cart[]
  events        EventLog[]
  
  // NextAuth
  accounts      Account[]
  sessions      Session[]
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Address {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  fullName    String
  phone       String
  addressLine1 String
  addressLine2 String?
  city        String
  state       String?
  postalCode  String
  country     String   @default("Somalia")
  
  isDefault   Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Reverse relations
  orders      Order[]
}

model Category {
  id          String      @id @default(cuid())
  name        String
  slug        String      @unique
  description String?
  image       String?     // Category image
  icon        String?     // Icon name or URL
  
  parentId    String?
  parent      Category?   @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[]  @relation("CategoryToCategory")
  
  products    Product[]   @relation("ProductCategories")
  
  active      Boolean     @default(true)
  featured    Boolean     @default(false)
  order       Int         @default(0) // For sorting
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Product {
  id          String      @id @default(cuid())
  sku         String      @unique
  title       String
  slug        String      @unique
  
  // Descriptions
  description String      // Long description (HTML supported)
  shortDesc   String?     // For listing cards (150 chars)
  
  // Pricing
  price       Int         // cents (base price)
  compareAtPrice Int?     // Original price for showing discounts
  costPrice   Int?        // Cost price for profit calculations (admin only)
  
  // Wholesale pricing
  wholesalePrice Int?     // Price for wholesale customers
  wholesaleMinQty Int?    // Minimum quantity for wholesale
  
  // Inventory
  stock       Int         @default(0)
  lowStockThreshold Int   @default(10)
  trackInventory Boolean  @default(true)
  allowBackorder Boolean  @default(false)
  
  // Media
  images      Json        // Array of image URLs
  videos      Json?       // Array of video URLs (optional)
  
  // Brand & Manufacturer
  brand       String?
  manufacturer String?
  
  // Rating & Reviews
  rating      Float       @default(0)
  reviewCount Int         @default(0)
  
  // Physical attributes
  weight      Float?      // in kg
  dimensions  Json?       // {length, width, height, unit: "cm"}
  color       String?
  size        String?
  material    String?
  
  // Category-specific attributes (flexible JSON)
  // Electronics: {processor, ram, storage}, Books: {author, isbn}, etc.
  attributes  Json?
  
  // SEO & Marketing
  metaTitle       String?
  metaDescription String?
  tags            Json?     // Searchable tags (array of strings)
  
  // Features & Specifications
  features        Json?     // Array of bullet points ["Feature 1", "Feature 2"]
  specifications  Json?     // Key-value pairs {key: "value"}
  highlights      Json?     // Key selling points
  
  // Shipping
  shippingWeight  Float?    // in kg (can differ from actual weight)
  freeShipping    Boolean   @default(false)
  
  // Product status
  active      Boolean     @default(true)
  featured    Boolean     @default(false)
  isNew       Boolean     @default(false)
  onSale      Boolean     @default(false)
  
  // Warranty & Returns
  warranty    String?     // "1 year", "2 years", "Lifetime"
  returnDays  Int?        // Number of days for returns (7, 30, etc.)
  
  // Relations
  categories  Category[]  @relation("ProductCategories")
  variants    ProductVariant[]
  discounts   ProductDiscount[]
  
  // Timestamps
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  publishedAt DateTime?   // For scheduled publishing
  
  // Reverse relations
  cartItems   CartItem[]
  orderItems  OrderItem[]
  wishlistBy  WishlistItem[]
  reviews     Review[]
}

// For products with variations (e.g., T-shirt in S/M/L, Phone in different colors)
model ProductVariant {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  sku         String   @unique
  title       String   // "Large - Red" or "256GB - Space Gray"
  
  // Pricing (if different from base product)
  price       Int?
  compareAtPrice Int?
  
  // Inventory
  stock       Int      @default(0)
  
  // Media
  image       String?  // Variant-specific image
  images      Json?    // Multiple images for this variant
  
  // Variant attributes
  attributes  Json     // {size: "L", color: "Red"} or {storage: "256GB", color: "Space Gray"}
  
  // Status
  active      Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Bulk pricing and time-limited discounts
model ProductDiscount {
  id          String       @id @default(cuid())
  productId   String
  product     Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  name        String       // "Black Friday Sale", "Bulk Discount 10+"
  type        DiscountType
  
  // Discount value
  value       Int          // Percentage (e.g., 20 for 20%) or fixed amount in cents
  
  // Conditions
  minQuantity Int?         // Minimum quantity to qualify
  maxQuantity Int?         // Maximum quantity (optional)
  
  // Customer type restriction
  wholesaleOnly Boolean    @default(false)
  
  // Time restriction
  startsAt    DateTime?
  endsAt      DateTime?
  
  // Status
  active      Boolean      @default(true)
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  @@index([productId, active])
}

model Review {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Review content
  rating      Int      // 1-5 stars
  title       String?
  comment     String
  images      Json?    // Review images array
  
  // Verification
  verified    Boolean  @default(false) // Verified purchase
  approved    Boolean  @default(true)  // Admin approval
  
  // Engagement
  helpfulCount Int     @default(0)     // How many found it helpful
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([productId, rating])
  @@index([userId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  items     CartItem[]
  
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id          String   @id @default(cuid())
  cartId      String
  productId   String
  variantId   String?  // If customer selected a variant
  qty         Int
  price       Int      // Price at time of adding to cart
  
  cart        Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id        String       @id @default(cuid())
  orderNumber String     @unique // Human-readable order number (e.g., "ORD-2024-00001")
  
  userId    String?
  user      User?        @relation(fields: [userId], references: [id])
  
  // Customer info (snapshot at time of order)
  email     String
  phone     String
  
  // Shipping address
  addressId String?
  address   Address?     @relation(fields: [addressId], references: [id])
  
  // Snapshot of address (in case address is deleted)
  shippingAddress Json
  
  // Pricing
  subtotal  Int          // Sum of items
  discount  Int          @default(0) // Total discount applied
  shipping  Int          @default(0) // Shipping cost
  tax       Int          @default(0) // Tax amount
  total     Int          // Final total
  
  // Shipping
  shippingMethod ShippingMethod @default(STANDARD)
  trackingNumber String?
  estimatedDelivery DateTime?
  actualDelivery DateTime?
  
  // Order status
  status    OrderStatus  @default(PENDING)
  
  // Payment
  paymentId String?
  payment   Payment?     @relation(fields: [paymentId], references: [id])
  paymentStatus PaymentStatus @default(PENDING)
  
  // Notes
  customerNotes String?  // Customer's notes
  adminNotes    String?  // Internal admin notes
  
  // Relations
  items     OrderItem[]
  
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  
  @@index([userId])
  @@index([status])
  @@index([orderNumber])
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  productId   String
  variantId   String?  // If customer ordered a variant
  
  // Snapshot at time of order
  title       String   // Product title
  sku         String   // Product/variant SKU
  image       String?  // Product image
  
  qty         Int
  price       Int      // Price per unit at time of order
  discount    Int      @default(0) // Discount per unit
  total       Int      // (price - discount) * qty
  
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])
  
  createdAt   DateTime @default(now())
}

model Payment {
  id        String         @id @default(cuid())
  method    PaymentMethod
  status    PaymentStatus  @default(PENDING)
  
  amount    Int            // Amount in cents
  currency  String         @default("USD")
  
  // Payment provider details
  reference String?        // Customer-entered TxnID or provider reference
  provider  String         // "ManualCapture" | "EVC" | "EDAHAB" | "Stripe"
  
  // Verification
  verified  Boolean        @default(false)
  verifiedAt DateTime?
  verifiedBy String?       // Admin user ID who verified
  
  // Metadata
  metadata  Json?          // Additional payment data
  
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  
  // Reverse relation
  orders    Order[]
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, productId])
}

model EventLog {
  id        String   @id @default(cuid())
  userId    String?
  type      String   // view, add_to_cart, begin_checkout, purchase, search
  payload   Json
  createdAt DateTime @default(now())
  
  user      User?    @relation(fields: [userId], references: [id])
  
  @@index([type, createdAt])
}

// Marketing banners for hero sections
model Banner {
  id        String   @id @default(cuid())
  key       String   @unique // e.g. electronics, beauty, books, furniture, fitness
  title     String
  subtitle  String
  imageUrl  String   // public URL or path under /public
  ctaText   String   @default("Shop now")
  ctaHref   String   @default("/")
  active    Boolean  @default(true)
  startsAt  DateTime @default(now())
  endsAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([key, active])
}

// NextAuth Prisma Adapter models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
}

